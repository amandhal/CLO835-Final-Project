name: Deploy to ECR

on: 
  push:
    branches: [ main ]

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

   
    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_DB: db
        ECR_REPOSITORY_APP: app
        IMAGE_TAG: final
      run: |
        cd application
        ls -ltra
        # Docker build
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG -f Dockerfile .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG -f Dockerfile_mysql .
        
        # Unit test
        docker network create final
        docker run -d --name db --net final -e MYSQL_ROOT_PASSWORD=pw $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG
        echo "Pause for 20 seconds to let container start"
        echo $AWS_ACCESS_KEY_ID
        printenv
        sleep 20
        docker run -d -p 80:81 -e AWS_ACCESS_KEY_ID="ASIAW326XDAXKAUVQYPP" -e AWS_SECRET_ACCESS_KEY="UoFfwiMBbOVnUWnQigc/9smgn0qLJPofwZ8nonXB" -e AWS_SESSION_TOKEN="FwoGZXIvYXdzECMaDNc+81P4mYtoHVB2JiLCAULD5R+/kQ2GBxGwyF5NSLnhzGGuLcSUFr3l1xTCmppN25NJXS2Gbegj+XDovfpJH7hAGlqIO7S/QAJi4zpJcPx5ifyxaBNPZQi1fNbavSmPDa2JlSyMmjOGLSGCHuqXx04CG24rC4QgZdPfilPMslWMWlwMvaqSD2cW35XZWxrMmzKvJJzMVnKmxMeWShp4tfF1C4zv/KLwD/4gL7qN8AmFt0R8AZuwteryboeLWScW04jxl/iqRnCuBcP0iLppYg1+KMqJ6KEGMi3ZJBvVv2wWGDZgcIxN+ZPPLVxkmJ0Ji8qhR7ixoL+t0vJlRm26pKEDN3o+8zk=" -e DBHOST=db -e DBUSER=root -e DBPWD=pw -e DBPORT=3306 -e APP_PORT=81 -e BUCKET_NAME=s3-fp -e OBJECT_KEY=images/kubernetes.svg -e LOCAL_FILE_NAME=kubernetes.svg --name app --net final $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG workflowapp.py
        docker ps -a
        echo "Pause for 10 seconds to let container start"
        sleep 10
        docker ps -a
        docker inspect db
        echo "db container logs"
        docker logs db
        echo "app container logs"
        docker logs app
        curl localhost -vvv
        
        # Docker push
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DB:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_APP:$IMAGE_TAG
